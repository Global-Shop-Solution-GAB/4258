Program.Sub.Preflight.Start
Program.External.Include.Library("JB0455.lib")
Program.Sub.Preflight.End

Program.Sub.Main.Start
'GCG_4258_LaborUpload.g2u
'Trey S
'December 6th, 2019
'For G D ROBERTS, INC, & FISK TANK
'Ticket: GDR010-61320191416-4
'This script will read a SigmaNest output file and upload labor based off of it
'IT is called by GCG_4258_SigmaNest_To_GSS.g2u
'the contents of the file are passed in FILE_CONTENTS

F.Intrinsic.Control.Try

V.Local.sFile.Declare(String)
V.Local.sFields.Declare(String)
V.Local.sTypes.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sSplit.Declare(String)
V.Local.sSplit2.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sJobs.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.bExists.Declare(Boolean, False)
V.Local.fQuantity.Declare(Float)
V.Local.sFilter.Declare(String)
V.Local.fSum.Declare(Float)
V.Local.sBody.Declare(String)
V.Local.sHeader.Declare(String)
V.Local.sRecipient.Declare(String)
V.Local.sSender.Declare(String)
V.Local.sData.Declare(String)
V.Local.sScrap.Declare(String)
V.Local.sScrapReason.Declare(String)
V.Local.fScrap.Declare(Float)

F.Intrinsic.Variable.PassedExists("FILE_NAME", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists.Not)
	F.Intrinsic.Control.CallSub(Close)
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("Processing file {0}", V.Passed.FILE_NAME, V.Local.sMessage)
F.Intrinsic.Control.CallSub(AddLog, "Project", "4258", "TASK", "Labor_Upload", "Message", V.Local.sMessage)

'split out
F.Intrinsic.String.Split(V.Passed.FILE_CONTENTS, V.Ambient.NewLine, V.Local.sFile)

'check if there's a header (always should be)
F.Intrinsic.Control.If(V.Local.sFile(0).Length, >, 9)
	F.Intrinsic.Control.If(V.Local.sFile(0).Left9, =, "JOBNUMBER")
		F.Intrinsic.Variable.RemoveArrayElementByOrdinal(V.Local.sFile, 0, V.Local.sFile)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'remove empty row if there
F.Intrinsic.Control.If(V.Local.sFile(V.Local.sFile.UBound).Trim, =, "")
	F.Intrinsic.Variable.RemoveArrayElementByOrdinal(V.Local.sFile, V.Local.sFile.UBound, V.Local.sFile)
F.Intrinsic.Control.EndIf

'check if valid file
F.Intrinsic.String.Split(V.Local.sFile(0), ",", V.Local.sSplit)
F.Intrinsic.Control.If(V.Local.sSplit.UBound, !=, 44)
	'bad file
	F.Intrinsic.Control.CallSub(AddLog, "Project", "4258", "TASK", "Labor_Upload", "Message", "File has incorrect column count. Exiting...")
	F.Intrinsic.Control.CallSub(Close)
F.Intrinsic.Control.EndIf
V.Local.sSplit.Redim(0, 0)

F.Intrinsic.String.Join(V.Local.sFile, V.Ambient.NewLine, V.Local.sFile)
V.Local.sFile.RedimPreserve(0, 0)

'check for empty lines
F.Data.DataTable.CreateFromString("dtLineCheck", V.Local.sFile, "LINE", "String", "***NODELIMITER***", V.Ambient.NewLine)
F.Data.DataView.Create("dtLineCheck", "dvLineCheck", 22, "[LINE] <> ',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,' and [LINE] <> ''", "")
F.Data.DataView.ToString("dtLineCheck", "dvLineCheck", "LINE", "***NODELIMITER***", V.Ambient.NewLine, V.Local.sFile)
F.Data.DataView.Close("dtLineCheck", "dvLineCheck")
F.Data.DataTable.Close("dtLineCheck")

F.Intrinsic.Control.If(V.Local.sFile.Trim, =, "")
	F.Intrinsic.Control.CallSub(AddLog, "Project", "4258", "TASK", "Labor_Upload", "Message", "File is empty. Exiting...")
	F.Intrinsic.Control.CallSub(Close)
F.Intrinsic.Control.EndIf

'create datatable for processing
V.Local.sFields.Set("JOBNUMBER*!*PROGRAMNUMBER*!*PARTNUMBER*!*QTYORDERED*!*QTYONPROGRAM*!*OnePartCutTime_Hrs*!*NESTEDAREA_in2_Ea_Part*!*NESTEDWEIGHT_Total_Lbs*!*SHEETNAME*!*PROGRAM_SCRAP_PERTAGE*!*MACHINE*!*SHT_LOCATION*!*SHT_HEATNUM*!*SHT_BinNum*!*SHT_Mil*!*PRT_Data1*!*PRT_Data2*!*PRT_Data3*!*PRT_Data4*!*PRT_Data5*!*PRT_Data6*!*PRT_Data7*!*PRT_Data8*!*PRT_Data9*!*PRT_Data10*!*PRT_Data11*!*PRT_Data12*!*PRT_Data13*!*PRT_Data14*!*Sht_Total_Area*!*True_Part_Weight*!*MachineNumber*!*Sht_PrimeCode*!*UsedArea*!*TaskName*!*Material*!*Thickness*!*QtyRejected*!*Scrapped_Part*!*ProgQtyNested*!*Operator*!*RejectReason*!*Comment*!*RejectDateTime*!*FILLER")
V.Local.sTypes.Set("String*!*String*!*String*!*Float*!*Float*!*Float*!*Float*!*Float*!*String*!*Float*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*Float*!*Float*!*String*!*String*!*Float*!*String*!*String*!*Float*!*Float*!*String*!*Float*!*String*!*String*!*String*!*String*!*String")
F.Data.DataTable.CreateFromString("dtFile", V.Local.sFile, V.Local.sFields, V.Local.sTypes, ",", V.Ambient.NewLine, True)

F.Intrinsic.Control.If(V.DataTable.dtFile.RowCount, <, 1)
	'empty file
	F.Data.DataTable.Close("dtFile")
	F.Intrinsic.Control.CallSub(AddLog, "Project", "4258", "TASK", "Labor_Upload", "Message", "File is empty. Exiting...")
	F.Intrinsic.Control.CallSub(Close)
F.Intrinsic.Control.EndIf

F.Data.DataView.Create("dtFile", "dvFile", 22)

'sum up quantity for that job
F.Data.DataView.ToDataTableDistinct("dtFile", "dvFile", "dtJobNumber", "JOBNUMBER")
F.Data.DataTable.AddColumn("dtFile", "TOTAL_JOB_QUANTITY", "Float", 0)
F.Data.DataTable.AddColumn("dtFile", "TOTAL_JOB_SCRAP", "Float", 0)
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtJobNumber.RowCount--, 1)
	F.Intrinsic.String.Build("[JOBNUMBER] = '{0}'", V.DataTable.dtJobNumber(V.Local.iCounter).JOBNUMBER!FieldValTrim, V.Local.sFilter)
	F.Data.DataTable.Compute("dtFile", "Sum(QTYONPROGRAM)", V.Local.sFilter, V.Local.fSum)
	F.Data.DataView.SetFilter("dtFile", "dvFile", V.Local.sFilter)
	F.Data.DataView.SetValue("dtFile", "dvFile", -1, "TOTAL_JOB_QUANTITY", V.Local.fSum)
	F.Data.DataTable.Compute("dtFile", "Sum(QtyRejected)", V.Local.sFilter, V.Local.fSum)
	F.Data.DataView.SetValue("dtFile", "dvFile", -1, "TOTAL_JOB_SCRAP", V.Local.fSum)
F.Intrinsic.Control.Next(V.Local.iCounter)
F.Data.DataTable.Close("dtJobNumber")
F.Data.DataView.SetFilter("dtFile", "dvFile", "")

'split out job, suffix, sequence
F.Data.DataTable.AddColumn("dtFile", "JOB", "String", "")
F.Data.DataTable.AddColumn("dtFile", "SUFFIX", "String", "")
F.Data.DataTable.AddColumn("dtFile", "SEQUENCE", "String", "")

F.Data.DataView.ToString("dtFile", "dvFile", "JOBNUMBER", "!@#$#@!", "$#@!@#$", V.Local.sJobs)
F.Intrinsic.String.Replace(V.Local.sJobs, "-", "!@#$#@!", V.Local.sJobs)
F.Intrinsic.String.Replace(V.Local.sJobs, ":", "!@#$#@!", V.Local.sJobs)
F.Data.DataTable.CreateFromString("dtJobFill", V.Local.sJobs, "JOB*!*SUFFIX*!*SEQUENCE", "String*!*String*!*String", "!@#$#@!", "$#@!@#$")
F.Data.DataTable.AddExpressionColumn("dtJobFill", "JOB_KEY", "String", "Trim([JOB]) + '-' + Trim([SUFFIX]) + ':' + Trim([SEQUENCE])")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobFill", "JOB_KEY", "JOB")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("dtFile", "dictTemp", "JOBNUMBER", "JOB")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobFill", "JOB_KEY", "SUFFIX")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("dtFile", "dictTemp", "JOBNUMBER", "SUFFIX")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobFill", "JOB_KEY", "SEQUENCE")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("dtFile", "dictTemp", "JOBNUMBER", "SEQUENCE")
F.Data.Dictionary.Close("dictTemp")

F.Data.DataTable.Close("dtJobFill")

'check if job exists
F.Data.DataTable.AddExpressionColumn("dtFile", "FULL_JOB", "String", "Trim([JOB]) + '-' + Trim([SUFFIX]) + '-' + Trim([SEQUENCE])")
F.Data.DataView.ToString("dtFile", "dvFile", "FULL_JOB", "***NODELIMITER***", "','", V.Local.sJobs)

'fill job exists and workcenter
F.Intrinsic.String.Build("select RTRIM(JOB) + '-' + RTRIM(SUFFIX) + '-' + RTRIM(SEQ) FULL_JOB, Cast(1 as Bit) JOB_EXISTS, RTRIM(PART) WORKCENTER, UNITS_OPEN - UNITS_COMPLETE REMAINING_QUANTITY, UNITS_COMPLETE,IF(RTRIM(IsNUll(FLAG_CLOSED, 'N')) = '', 'N', RTRIM(IsNUll(FLAG_CLOSED, 'N'))) FLAG_CLOSED, UNITS_SCRAP from V_JOB_OPERATIONS where FULL_JOB in ('{0}') and LMO = 'L' and SEQ < '900000'", V.Local.sJobs, V.Local.sSQL)

F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
F.Data.DataTable.CreateFromSQL("dtJobs", "Con", V.Local.sSQL)
F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobs", "FULL_JOB", "JOB_EXISTS")
F.Data.Dictionary.SetDefaultReturn("dictTemp", False)
F.Data.DataTable.AddColumn("dtFile", "VALID_JOB", "Boolean", False)
F.Data.DataTable.FillFromDictionary("dtFile", "dictTemp", "FULL_JOB", "VALID_JOB")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobs", "FULL_JOB", "REMAINING_QUANTITY")
F.Data.Dictionary.SetDefaultReturn("dictTemp", 0)
F.Data.DataTable.AddColumn("dtFile", "REMAINING_QUANTITY", "Float", 0)
F.Data.DataTable.FillFromDictionary("dtFile", "dictTemp", "FULL_JOB", "REMAINING_QUANTITY")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobs", "FULL_JOB", "WORKCENTER")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("dtFile", "GSS_WORKCENTER", "String", "")
F.Data.DataTable.FillFromDictionary("dtFile", "dictTemp", "FULL_JOB", "GSS_WORKCENTER")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobs", "FULL_JOB", "FLAG_CLOSED")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("dtFile", "FLAG_CLOSED", "String", "")
F.Data.DataTable.FillFromDictionary("dtFile", "dictTemp", "FULL_JOB", "FLAG_CLOSED")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobs", "FULL_JOB", "UNITS_COMPLETE")
F.Data.Dictionary.SetDefaultReturn("dictTemp", 0)
F.Data.DataTable.AddColumn("dtFile", "UNITS_COMPLETE", "Float", 0)
F.Data.DataTable.FillFromDictionary("dtFile", "dictTemp", "FULL_JOB", "UNITS_COMPLETE")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobs", "FULL_JOB", "UNITS_SCRAP")
F.Data.Dictionary.SetDefaultReturn("dictTemp", 0)
F.Data.DataTable.AddColumn("dtFile", "UNITS_SCRAP", "Float", 0)
F.Data.DataTable.FillFromDictionary("dtFile", "dictTemp", "FULL_JOB", "UNITS_SCRAP")
F.Data.Dictionary.Close("dictTemp")

F.Data.DataTable.Close("dtJobs")

'write invalid jobs
F.Data.DataView.SetFilter("dtFile", "dvFile", "[VALID_JOB] = False")
F.Intrinsic.Control.If(V.DataView.dtFile!dvFile.RowCount, >, 0)
	F.Data.DataView.ToString("dtFile", "dvFile", "JOBNUMBER", "***NODELIMITER***", ", ", V.Local.sMessage)
	F.Intrinsic.String.Replace(V.Local.sMessage, ":", "-", V.Local.sMessage)
	F.Intrinsic.String.Build("Invalid or closed jobs found: {0}", V.Local.sMessage, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(AddLog, "Project", "4258", "TASK", "Labor_Upload", "Message", V.Local.sMessage)
F.Intrinsic.Control.EndIf
F.Data.DataView.SetFilter("dtFile", "dvFile", "")

'check if material issued
F.Data.DataTable.AddExpressionColumn("dtFile", "JOBSUFF", "String", "Trim([JOB]) + '-' + Trim([SUFFIX])")
F.Data.DataView.ToString("dtFile", "dvFile", "JOBSUFF", "***NODELIMITER***", "','", V.Local.sJobs)
F.Intrinsic.String.Build("select RTRIM(JOB) + '-' + RTRIM(SUFFIX) JOBSUFF, Cast(1 as Bit) MATERIAL_ISSUED from V_JOB_OPERATIONS where JOBSUFF in ('{0}') and LMO = 'M' and HOURS_ACTUAL > 0", V.Local.sJobs, V.Local.sSQL)
F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
F.Data.Dictionary.CreateFromSQL("dictMaterial", "Con", V.Local.sSQL)
F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)
F.Data.Dictionary.SetDefaultReturn("dictMaterial", False)
F.Data.DataTable.AddColumn("dtFile", "MATERIAL_ISSUED", Boolean, False)
F.Data.DataTable.FillFromDictionary("dtFile", "dictMaterial", "JOBSUFF", "MATERIAL_ISSUED")
F.Data.Dictionary.Close("dictMaterial")

'write jobs with no material issued
F.Data.DataView.SetFilter("dtFile", "dvFile", "[MATERIAL_ISSUED] = False and [VALID_JOB] = True")
F.Intrinsic.Control.If(V.DataView.dtFile!dvFile.RowCount, >, 0)
	F.Data.DataView.ToString("dtFile", "dvFile", "JOBNUMBER", "***NODELIMITER***", ", ", V.Local.sMessage)
	F.Intrinsic.String.Replace(V.Local.sMessage, ":", "-", V.Local.sMessage)
	F.Intrinsic.String.Build("Jobs with no material issued found: {0}", V.Local.sMessage, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(AddLog, "Project", "4258", "TASK", "Labor_Upload", "Message", V.Local.sMessage)
	
	F.Intrinsic.Control.CallSub(GetNotifications)
	F.Intrinsic.Control.If(V.Args.NOTIFY)
		F.Intrinsic.Control.If(V.Args.From.Trim, !=, "", and, V.Args.To.Trim, !=, "")
			'build sender/recipient
			F.Intrinsic.String.Build("{0}*!*{0}", V.Args.From.Trim, V.Local.sSender)
			F.Intrinsic.String.Build("{0}*!*{0}", V.Args.To.Trim, V.Local.sRecipient)
			
			F.Intrinsic.String.Build("SigmaNest to GSS Integration Labor Upload for file {0} failed because the listed jobs do not have material issued to them. {1}{2}", V.Passed.FILE_NAME, V.Ambient.NewLine, V.Local.sMessage, V.Local.sBody)
			
			F.Global.Messaging.QueueMessage(V.Caller.CompanyCode, 0, "GCG_4258_LaborUpload.g2u", "SigmaNest to GSS Integration Failure", V.Local.sSender, V.Local.sRecipient, V.Local.sBody)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Data.DataView.SetFilter("dtFile", "dvFile", "[VALID_JOB] = True and [MATERIAL_ISSUED] = True")
F.Intrinsic.Control.If(V.DataView.dtFile!dvFile.RowCount, <, 1)
	'no valid jobs, exit
	F.Intrinsic.Control.CallSub(AddLog, "Project", "4258", "TASK", "Labor_Upload", "Message", "No valid open jobs found. Exiting...")
	F.Intrinsic.Control.CallSub(Close)
F.Intrinsic.Control.EndIf

'check if workcenter exists
F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
F.Data.Dictionary.CreateFromSQL("dictWorkcenters", "Con", "select RTRIM(MACHINE), Cast(1 as Bit) from V_WORKCENTERS")
F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)
F.Data.Dictionary.SetDefaultReturn("dictWorkcenters", False)
F.Data.DataTable.AddColumn("dtFile", "WORKCENTER_EXISTS", "Boolean", False)
F.Data.DataTable.FillFromDictionary("dtFile", "dictWorkcenters", "MACHINE", "WORKCENTER_EXISTS")
F.Data.Dictionary.Close("dictWorkcenters")

F.Data.DataTable.AddExpressionColumn("dtFile", "FINAL_WORKCENTER", "String", "IIF([WORKCENTER_EXISTS], Trim([MACHINE]), [GSS_WORKCENTER])")

F.Data.DataView.SetFilter("dtFile", "dvFile", "[VALID_JOB] = True and [FINAL_WORKCENTER] <> '' and [MATERIAL_ISSUED] = True")
F.Intrinsic.Control.If(V.DataView.dtFile!dvFile.RowCount, <, 1)
	'no valid workcenters, exit
	F.Intrinsic.String.Build("Processing file: {0}", V.Passed.FILE_NAME, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(AddLog, "Project", "4258", "TASK", "Labor_Upload", "Message", "No valid workcenters found. Exiting...")
	F.Intrinsic.Control.CallSub(Close)
F.Intrinsic.Control.EndIf

'at this point everything has been checked
'now upload the labor
F.Data.DataTable.AddExpressionColumn("dtFile", "CLOSE_SEQUENCE", "String", "IIF([REMAINING_QUANTITY] > [TOTAL_JOB_QUANTITY], 'N', 'Y')")
F.Data.DataTable.AddExpressionColumn("dtFile", "TOTAL_TIME", "Float", "[QTYONPROGRAM] * [ONEPARTCUTTIME_HRS]")

'Add TOTAL_JOB_QUANTITY with UNITS_COMPLETE for the move ticket qty
F.Data.DataTable.AddExpressionColumn("dtFile", "MOVE_TICKET_QTY", "Float", "[TOTAL_JOB_QUANTITY] + [UNITS_COMPLETE]")

F.Intrinsic.Control.CallSub(GetDefaultEmployee)
F.Intrinsic.Control.If(V.Args.Employee.Trim, =, "")
	'no default employee, exit
	F.Intrinsic.Control.CallSub(AddLog, "Project", "4258", "TASK", "Labor_Upload", "Message", "No default employee found. Exiting...")
	F.Intrinsic.Control.CallSub(Close)
F.Intrinsic.Control.EndIf


'add the records to the library datatable to upload, print good tickets
F.Data.DataTable.AddColumn("dtFile", "ALREADY_PRINTED", "Boolean", False)
F.Data.DataView.Create("dtFile", "dvPrintCheck", 22)
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataView.dtFile!dvFile.RowCount--, 1)
	F.Intrinsic.Math.Mult(V.DataView.dtFile!dvFile(V.Local.iCounter).QTYONPROGRAM!FieldValFloat, 10000, V.Local.fQuantity)
	F.Intrinsic.String.Format(V.DataView.dtFile!dvFile(V.Local.iCounter).QtyRejected!FieldValFloat, "0.00", V.Local.sScrap)
	
	'need to get scrap reason here
	F.Intrinsic.Control.SelectCase(V.DataView.dtFile!dvFile(V.Local.iCounter).RejectReason!FieldValTrim)
		F.Intrinsic.Control.Case("1")
			V.Local.sScrapReason.Set("07")
		F.Intrinsic.Control.Case("2")
			V.Local.sScrapReason.Set("12")
		F.Intrinsic.Control.Case("3")
			V.Local.sScrapReason.Set("09")
		F.Intrinsic.Control.Case("4")
			V.Local.sScrapReason.Set("09")
		F.Intrinsic.Control.Case("5")
			V.Local.sScrapReason.Set("01")
		F.Intrinsic.Control.Case("6")
			V.Local.sScrapReason.Set("07")
		F.Intrinsic.Control.CaseElse
			V.Local.sScrapReason.Set("")
	F.Intrinsic.Control.EndSelect
	
	F.Data.DataTable.AddRow("JB0455", "DATE", V.Ambient.Date.FormatMMDDYY, "EMPLOYEE", V.Args.Employee, "JOB", V.DataView.dtFile!dvFile(V.Local.iCounter).JOB!FieldValTrim, "SUFFIX", V.DataView.dtFile!dvFile(V.Local.iCounter).SUFFIX!FieldValTrim, "SEQ", V.DataView.dtFile!dvFile(V.Local.iCounter).SEQUENCE!FieldValTrim, "WC", V.DataView.dtFile!dvFile(V.Local.iCounter).FINAL_WORKCENTER!FieldValTrim, "HOURS", V.DataView.dtFile!dvFile(V.Local.iCounter).TOTAL_TIME!FieldValFloat, "CLOSED", V.DataView.dtFile!dvFile(V.Local.iCounter).CLOSE_SEQUENCE!FieldValTrim, "INDIRECT", "D", "RATETYPE", "R", "GOODPCS", V.Local.fQuantity, "ScrapPcs", V.Local.sScrap, "Reason", V.Local.sScrapReason)
	
	'print move tickect
	'check and see if the sequence will be closed, is not already closed, AND if an earlier record here will won't close it
	F.Intrinsic.Control.If(V.DataView.dtFile!dvFile(V.Local.iCounter).CLOSE_SEQUENCE!FieldValTrim, =, "Y", "AND", V.DataView.dtFile!dvFile(V.Local.iCounter).FLAG_CLOSED!FieldValTrim, !=, "Y", V.DataView.dtFile!dvFile(V.Local.iCounter).ALREADY_PRINTED!FieldVal, =, False)
	
		F.Intrinsic.String.Build("Printing move ticket for job [{0}-{1}-{2}]...", V.DataView.dtFile!dvFile(V.Local.iCounter).JOB!FieldValTrim, V.DataView.dtFile!dvFile(V.Local.iCounter).SUFFIX!FieldValTrim, V.DataView.dtFile!dvFile(V.Local.iCounter).SEQUENCE!FieldValTrim, V.Local.sMessage)
		F.Intrinsic.Control.CallSub(AddLog, "Project", "4258", "TASK", "Labor_Upload", "Message", V.Local.sMessage)
		
		F.Intrinsic.String.Build("{0}*#!#*{1}*#!#*{2}*#!#*{3}*#!#*{4}*#!#*{5}*#!#*{6}*#!#*{7}*#!#*{8}*#!#*{9}*#!#*{10}*#!#*{11}", V.DataView.dtFile!dvFile(V.Local.iCounter).JOB!FieldValTrim, V.DataView.dtFile!dvFile(V.Local.iCounter).SUFFIX!FieldValTrim, V.DataView.dtFile!dvFile(V.Local.iCounter).SEQUENCE!FieldValTrim, V.DataView.dtFile!dvFile(V.Local.iCounter).MOVE_TICKET_QTY!FieldValFloat, V.Args.EMPLOYEE, V.DataView.dtFile!dvFile(V.Local.iCounter).FINAL_WORKCENTER!FieldValTrim, V.DataView.dtFile!dvFile(V.Local.iCounter).CLOSE_SEQUENCE!FieldValTrim, "", "", 0, "", "", V.Local.sData)
		F.Intrinsic.Control.CallSub(MoveTicket, "Data", V.Local.sData)
		
		F.Intrinsic.String.Build("[VALID_JOB] = True and [FINAL_WORKCENTER] <> '' and [MATERIAL_ISSUED] = True and [JOB] = '{0}' and [SUFFIX] = '{1}' and [SEQUENCE] = '{2}'", V.DataView.dtFile!dvFile(V.Local.iCounter).JOB!FieldValTrim, V.DataView.dtFile!dvFile(V.Local.iCounter).SUFFIX!FieldValTrim, V.DataView.dtFile!dvFile(V.Local.iCounter).SEQUENCE!FieldValTrim, V.Local.sFilter)
		F.Data.DataView.SetFilter("dtFile", "dvPrintCheck", V.Local.sFilter)
		F.Data.DataView.SetValue("dtFile", "dvPrintCheck", -1, "ALREADY_PRINTED", True)
	F.Intrinsic.Control.EndIf
	
'	'print scrap ticket
'	F.Intrinsic.Control.If(V.DataView.dtFile!dvFile(V.Local.iCounter).QtyRejected!FieldValFloat, >, 0)
'		'TOTAL_JOB_SCRAP
'		'F.Intrinsic.Math.Add(V.DataView.dtFile!dvFile(V.Local.iCounter).QtyRejected!FieldValFloat, V.DataView.dtFile!dvFile(V.Local.iCounter).TOTAL_JOB_SCRAP!FieldValFloat, V.Local.fScrap)
'		
'		F.Intrinsic.String.Build("Printing scrap ticket for job [{0}-{1}-{2}]...", V.DataView.dtFile!dvFile(V.Local.iCounter).JOB!FieldValTrim, V.DataView.dtFile!dvFile(V.Local.iCounter).SUFFIX!FieldValTrim, V.DataView.dtFile!dvFile(V.Local.iCounter).SEQUENCE!FieldValTrim, V.Local.sMessage)
'		F.Intrinsic.Control.CallSub(AddLog, "Project", "4258", "TASK", "Labor_Upload", "Message", V.Local.sMessage)
'		
'		V.Local.fScrap.Set(V.DataView.dtFile!dvFile(V.Local.iCounter).QtyRejected!FieldValFloat)
'		F.Intrinsic.String.Build("{0}*#!#*{1}*#!#*{2}*#!#*{3}*#!#*{4}*#!#*{5}*#!#*{6}*#!#*{7}*#!#*{8}*#!#*{9}*#!#*{10}*#!#*{11}", V.DataView.dtFile!dvFile(V.Local.iCounter).JOB!FieldValTrim, V.DataView.dtFile!dvFile(V.Local.iCounter).SUFFIX!FieldValTrim, V.DataView.dtFile!dvFile(V.Local.iCounter).SEQUENCE!FieldValTrim, 0, V.Args.EMPLOYEE, V.DataView.dtFile!dvFile(V.Local.iCounter).FINAL_WORKCENTER!FieldValTrim, V.DataView.dtFile!dvFile(V.Local.iCounter).CLOSE_SEQUENCE!FieldValTrim, "", "", V.Local.fScrap, V.DataView.dtFile!dvFile(V.Local.iCounter).Comment!FieldValTrim, V.Local.sScrapReason, V.Local.sData)
'		F.Intrinsic.Control.CallSub(MoveTicket, "Data", V.Local.sData)
'	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)
F.Data.DataView.Close("dtFile", "dvPrintCheck")

'launch the labor upload
F.Intrinsic.Control.CallSub(JB0455Sync)
F.Intrinsic.Control.CallSub(AddLog, "Project", "4258", "TASK", "Labor_Upload", "Message", "Labor upload complete.")

F.Data.DataView.Close("dtFile", "dvFile")
F.Data.DataTable.Close("dtFile")

F.Intrinsic.Control.CallSub(Close)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Close", "UNATTENDED", True, "PROJECT", "4258", "PROJECTTITLE", "SigmaNest to GSS Labor Upload", "TASK", "Labor_Upload")
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.GetDefaultEmployee.Start
F.Intrinsic.Control.Try

V.Local.sFile.Declare(String)
V.Local.sContents.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sEmployee.Declare(String, "")

F.Intrinsic.String.Build("{0}\Custom\4258\Settings\IMPORT_SETTINGS.dat", V.Caller.GlobalDir, V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.File.File2String(V.Local.sFile, V.Local.sContents)
	F.Intrinsic.String.Split(V.Local.sContents, "!@#$%$#@!", V.Local.sContents)
	V.Local.sEmployee.Set(V.Local.sContents(0))
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("EMPLOYEE", V.Local.sEmployee)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Close", "UNATTENDED", True, "PROJECT", "4258", "PROJECTTITLE", "SigmaNest to GSS Labor Upload", "TASK", "Labor_Upload")
F.Intrinsic.Control.EndTry
Program.Sub.GetDefaultEmployee.End

Program.Sub.GetNotifications.Start
F.Intrinsic.Control.Try

V.Local.sFile.Declare(String)
V.Local.sContents.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.bNotifications.Declare(Boolean, False)
V.Local.sFromEmail.Declare(String, "")
V.Local.sToEmail.Declare(String, "")

F.Intrinsic.String.Build("{0}\Custom\4258\Settings\IMPORT_SETTINGS.dat", V.Caller.GlobalDir, V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.File.File2String(V.Local.sFile, V.Local.sContents)
	F.Intrinsic.String.Split(V.Local.sContents, "!@#$%$#@!", V.Local.sContents)
	F.Intrinsic.Control.If(V.Local.sContents.UBound, >, 1)
		V.Local.bNotifications.Set(V.Local.sContents(2))
		V.Local.sFromEmail.Set(V.Local.sContents(3).Trim)
		V.Local.sToEmail.Set(V.Local.sContents(4).Trim)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("NOTIFY", V.Local.bNotifications)
F.Intrinsic.Variable.AddRV("FROM", V.Local.sFromEmail)
F.Intrinsic.Variable.AddRV("TO", V.Local.sToEmail)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Close", "UNATTENDED", True, "PROJECT", "4258", "PROJECTTITLE", "SigmaNest to GSS Labor Upload", "TASK", "Labor_Upload")
F.Intrinsic.Control.EndTry
Program.Sub.GetNotifications.End

Program.Sub.Connection.Start
'open or close connection if necessary, keep track of all connections

F.Intrinsic.Control.Try

V.Static.iConnections.Declare(Long)

F.Intrinsic.Control.If(V.Args.Connect)
	F.Intrinsic.Control.If(V.Static.iConnections, =, 0)
		F.ODBC.Connection!Con.OpenCompanyConnection
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Math.Add(V.Static.iConnections, 1, V.Static.iConnections)
F.Intrinsic.Control.Else
	F.Intrinsic.Control.If(V.Static.iConnections, >, 0)
		F.Intrinsic.Math.Sub(V.Static.iConnections, 1, V.Static.iConnections)
		
		F.Intrinsic.Control.If(V.Static.iConnections, =, 0)
			F.ODBC.Connection!Con.Close
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Close", "UNATTENDED", True, "PROJECT", "4258", "PROJECTTITLE", "SigmaNest to GSS Labor Upload", "TASK", "Labor_Upload")
F.Intrinsic.Control.EndTry
Program.Sub.Connection.End

Program.Sub.Close.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.DataTable.dtFile.Exists)
	F.Intrinsic.Control.If(V.DataView.dtFile!dvFile.Exists)
		F.Data.DataView.Close("dtFile", "dvFile")
	F.Intrinsic.Control.EndIf
	F.Data.DataTable.Close("dtFile")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Close", "UNATTENDED", True, "PROJECT", "4258", "PROJECTTITLE", "SigmaNest to GSS Labor Upload", "TASK", "Labor_Upload")
F.Intrinsic.Control.EndTry
Program.Sub.Close.End

Program.Sub.ErrorMessage.Start
'basic error message for replacing catch block
'this is really just for when printing the message and ending program
'pass error number, error description, current subroutine
'optional callback sub, this will be called before ending
'optional unattended parameters, those subs may not exist if not using them but won't be called
F.Intrinsic.Control.Try

V.Local.iError.Declare(Long)
V.Local.sErrorDescription.Declare(String)
V.Local.sSubroutine.Declare(String)
V.Local.sError.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sCallback.Declare(String)
V.Static.bError.Declare(Boolean, False)

V.Local.iError.Set(V.Args.ErrorNumber)
V.Local.sErrorDescription.Set(V.Args.ErrorDescription)
V.Local.sSubroutine.Set(V.Args.Subroutine)

'make sure we aren't in an error loop
F.Intrinsic.Control.If(V.Static.bError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf
V.Static.bError.Set(True)

F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}", V.Caller.ScriptFile, V.Ambient.Newline, V.Local.sSubroutine, V.Local.iError, V.Local.sErrorDescription, V.Ambient.GABVersion, V.Local.sError)

F.Intrinsic.Variable.ArgExists("UNATTENDED", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.Control.If(V.Args.UNATTENDED)
		F.Intrinsic.Control.CallSub(UnattendedErrorMessage, "MESSAGE", V.Local.sError, "PROJECT", V.Args.PROJECT, "PROJECTTITLE", V.Args.PROJECTTITLE, "TASK", V.Args.Task)
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox(V.Local.sError)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.ArgExists("Callback", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	V.Local.sCallback.Set(V.Args.Callback.Trim)
	F.Intrinsic.Control.CallSub(V.Local.sCallback)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.ErrorMessage.End

Program.Sub.AddLog.Start
'pass a project #, and a message
'date and time will be automatically added
'pass PROJECT (Folder, log name)
'MESSAGE (what to log)

F.Intrinsic.Control.Try

V.Local.sProject.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sPath.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sContents.Declare(String)
V.Local.sTask.Declare(String)

V.Local.sProject.Set(V.Args.Project.Trim)
V.Local.sMessage.Set(V.Args.Message.Trim)
V.Local.sTask.Set(V.Args.Task)

F.Intrinsic.String.Replace(V.Local.sMessage, V.Ambient.NewLine, ", ", V.Local.sMessage)

F.Intrinsic.File.MakeFilenameFriendly(V.Local.sProject, V.Local.sProject)
F.Intrinsic.String.Build("{0}\Custom\{1}\{2}\Log\", V.Caller.GlobalDir, V.Local.sProject, , V.Caller.CompanyCode, V.Local.sPath)
F.Intrinsic.Control.CallSub(CheckDirectories, "DIRECTORIES", V.Local.sPath)

F.Intrinsic.String.Build("{0}\{1}_Log.txt", V.Local.sPath, V.Local.sTask, V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists.Not)
	F.Intrinsic.String.Build("{0} {1}: Log Start", V.Ambient.Date.FormatYYYY-MM-DD, V.Ambient.Time.Format!HH:NN:SS, V.Local.sContents)
	F.Intrinsic.File.String2File(V.Local.sFile, V.Local.sContents)
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("{0} {1}: {2}", V.Ambient.Date.FormatYYYY-MM-DD, V.Ambient.Time.Format!HH:NN:SS, V.Local.sMessage, V.Local.sContents)
F.Intrinsic.File.Append2FileNewLine(V.Local.sFile, V.Local.sContents)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Close", "UNATTENDED", True, "PROJECT", "4258", "PROJECTTITLE", "SigmaNest to GSS Labor Upload", "TASK", "Labor_Upload")
F.Intrinsic.Control.EndTry
Program.Sub.AddLog.End

Program.Sub.UnattendedErrorMessage.Start
'send a short error message, add the log
'pass project ID, project title (for message box title), and error message

F.Intrinsic.Control.Try

V.Local.sMessage.Declare(String)

V.Local.sMessage.Set(V.Args.Message.Trim)
F.Intrinsic.String.Replace(V.Local.sMessage, V.Ambient.NewLine, ", ", V.Local.sMessage)

F.Intrinsic.UI.InvokeWaitDialog(V.Local.sMessage, V.Args.ProjectTitle)
F.Intrinsic.UI.Sleep(10)
F.Intrinsic.UI.CloseWaitDialog

F.Intrinsic.Control.CallSub(AddLog, "Project", V.Args.Project, "TASK", V.Args.Task, "Message", V.Local.sMessage)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Close", "UNATTENDED", True, "PROJECT", "4258", "PROJECTTITLE", "SigmaNest to GSS Labor Upload", "TASK", "Labor_Upload")
F.Intrinsic.Control.EndTry
Program.Sub.UnattendedErrorMessage.End

Program.Sub.CheckDirectories.Start
'check if the given import directories exist
'create them if they don't
'pass directories delimited with *!*

F.Intrinsic.Control.Try

V.Local.sDirectories.Declare(String)
V.Local.sPath.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.iCounter.Declare(Long)

V.Local.sDirectories.Set(V.Args.Directories)
F.Intrinsic.String.Split(V.Local.sDirectories, "*!*", V.Local.sDirectories)

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sDirectories.UBound, 1)
	V.Local.sPath.Set(V.Local.sDirectories(V.Local.iCounter))
	F.Intrinsic.File.DirExists(V.Local.sPath, V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists.Not)
		F.Intrinsic.File.CreateDir(V.Local.sPath)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Close", "UNATTENDED", True, "PROJECT", "4258", "PROJECTTITLE", "SigmaNest to GSS Labor Upload", "TASK", "Labor_Upload")
F.Intrinsic.Control.EndTry
Program.Sub.CheckDirectories.End

Program.Sub.MoveTicket.Start
F.Intrinsic.Control.Try

V.Local.sJob.Declare(String)
V.Local.sSuffix.Declare(String)
V.Local.sSeq.Declare(String)
V.Local.sQty.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sScrapQty.Declare(String)
V.Local.sCurPart.Declare(String)
V.Local.sCurDescr.Declare(String)
V.Local.sQtyCompleted.Declare(Float)
V.Local.sNextSeq.Declare(String)
V.Local.sNextPart.Declare(String)
V.Local.sNextDescr.Declare(String)
V.Local.sLMO.Declare(String)
V.Local.sNext_DateStart.Declare(String)
V.Local.sNext_DateDue.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sCust.Declare(String)
V.Local.sWOPriority.Declare(String)
V.Local.sPartDescr.Declare(String)
V.Local.sWOQty.Declare(String)
V.Local.sWOCustQty.Declare(String)
V.Local.sWODateDue.Declare(String)
V.Local.sName.Declare(String)
V.Local.sEmployee.Declare(String)
V.Local.sScrapCode.Declare(String)
V.Local.sScrapDescription.Declare(String)
V.Local.sParentJob.Declare(String)
V.Local.sParentSuffix.Declare(String)
V.Local.sParentPart.Declare(String)
V.Local.sParentDescr.Declare(String)
V.Local.sTopParentJob.Declare(String)
V.Local.sTopParentSuffix.Declare(String)
V.Local.sTopParentPart.Declare(String)
V.Local.sTopParentDescr.Declare(String)
V.Local.sParentInitWC.Declare(String)
V.Local.sWC.Declare(String)
V.Local.sQualitynbr.Declare(String)
V.Local.sCloseflag.Declare(String)
V.Local.sComments.Declare(String)
V.Local.sRptLoc.Declare(String)
V.Local.iRptID.Declare(Long)
V.Local.sTPrinter.Declare(String)
V.Local.sScrapPrinter.Declare(String)
V.Local.sScrapFlag.Declare(String)
V.Local.sParams.Declare(String)
V.Local.sValues.Declare(String)
V.Local.sScrapReF.Declare(String)
V.Local.dNext_DateStart.Declare(Date)
V.Local.dNext_DateDue.Declare(Date)
V.Local.iRet.Declare(Long)
V.Local.iBIRunID.Declare(Long)
V.Local.iLogID.Declare(Long)
V.Local.sType.Declare(String)
V.Local.sBITable.Declare(String)
V.Local.sSettingsTable.Declare(String)
V.Local.sReportName.Declare(String)
V.Local.sData.Declare(String)
V.Local.sCustomLabel.Declare(String)
V.Local.sError.Declare(String)
V.Local.fWeight.Declare(Float)
V.Local.sCustomerPO.Declare(String)
V.Local.sNote.Declare(String)
V.Local.sRet.Declare(String)

F.Intrinsic.String.Split(V.Args.Data, "*#!#*", V.Local.sData)

F.ODBC.Connection!Con.OpenCompanyConnection

V.Local.sjob.Set(V.Local.sData(0))
V.Local.ssuffix.Set(V.Local.sData(1))
V.Local.sseq.Set(V.Local.sData(2))
V.Local.sQty.Set(V.Local.sData(3))
V.Local.sEmployee.Set(V.Local.sData(4))
V.Local.sWC.Set(V.Local.sData(5))
V.Local.sCloseflag.Set(V.Local.sData(6))
V.Local.sQualitynbr.Set(V.Local.sData(7))
V.Local.sScrapReF.Set(V.Local.sData(8))
V.Local.sScrapQty.Set( V.Local.sData(9))
V.Local.sComments.Set(V.Local.sData(10))
V.Local.sScrapCode.Set(V.Local.sData(11))
V.Local.sType.Set("ATG")
V.Local.sCustomLabel.Set("")

V.Local.sBITable.Set("ATG_WIP_OPER_LABEL")
V.Local.sSettingsTable.Set("ATG_MOVE_TCKT_SETUP")
V.Local.sReportName.Set("OYB_WIP_Operation_Label_ATG.rpt")
F.Intrinsic.String.Build("{0}\Custom\{1}", V.Caller.BusintDir, V.Local.sReportName, V.Local.sRptLoc)

'if good pieces is 0 then don't continue
F.Intrinsic.Control.If(V.Local.sQty.Float,<=,0,"AND",V.Local.sscrapqty.Float,<=,0)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("SELECT PART, DESCRIPTION, UNITS_COMPLETE FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}' ",V.Local.sjob,V.Local.sSuffix,V.Local.sSeq,V.Local.sSQL)
F.ODBC.Connection!Con.OpenRecordsetRO("rstSel",V.Local.sSQL)
F.Intrinsic.Control.If(V.ODBC.Con!rstSel.EOF,=,False)
	V.Local.sCurPart.Set(V.ODBC.Con!rstSel.FieldValTrim!PART)
	V.Local.sCurDescr.Set(V.ODBC.Con!rstSel.FieldValTrim!DESCRIPTION)
	V.Local.sQtyCompleted.Set(V.ODBC.Con!rstSel.FieldValTrim!UNITS_COMPLETE)
F.Intrinsic.Control.EndIf
F.ODBC.Con!rstSel.Close

F.Intrinsic.String.Build("SELECT SEQ, PART, DESCRIPTION, LMO, DATE_START, DATE_DUE, UNITS_COMPLETE FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ > '{2}' AND LMO <> 'C' AND LMO <> 'M' AND TASK_SEQ <> 'T' ORDER BY SEQ ",V.Local.sJob,V.Local.sSuffix,V.Local.sSeq,V.Local.sSQL)
F.ODBC.Connection!Con.OpenRecordsetRO("rstSel",V.Local.sSQL)
F.Intrinsic.Control.If(V.ODBC.Con!rstSel.EOF,=,False)
	V.Local.sNextSeq.Set(V.ODBC.Con!rstSel.FieldValTrim!SEQ)
	V.Local.sNextPart.Set(V.ODBC.Con!rstSel.FieldValTrim!PART)
	V.Local.sNextDescr.Set(V.ODBC.Con!rstSel.FieldValTrim!DESCRIPTION)
	V.Local.sLMO.Set(V.ODBC.Con!rstSel.FieldValTrim!LMO)
	V.Local.dNext_DateStart.Set(V.ODBC.Con!rstSel.FieldVal!DATE_START)
	V.Local.dNext_DateDue.Set(V.ODBC.Con!rstSel.FieldVal!DATE_DUE)
F.Intrinsic.Control.Else
	F.Intrinsic.Date.ConvertDString("01/01/1900","mm/dd/yyyy",V.Local.dNext_DateStart)
	F.Intrinsic.Date.ConvertDString("01/01/1900","mm/dd/yyyy",V.Local.dNext_DateDue)
F.Intrinsic.Control.EndIf
F.ODBC.Con!rstSel.Close

F.Intrinsic.String.Build("SELECT PART, CUSTOMER, PRIORITY, PART_DESCRIPTION,QTY_ORDER, QTY_CUSTOMER, DATE_DUE, CUSTOMER_PO FROM V_JOB_HEADER WHERE JOB = '{0}' AND SUFFIX = '{1}' ",V.Local.sJob,V.Local.sSuffix,V.Local.sSQL)
F.ODBC.Connection!Con.OpenRecordsetRO("rstSel",V.Local.sSQL)
F.Intrinsic.Control.If(V.ODBC.Con!rstSel.EOF,=,False)
	V.Local.sPart.Set(V.ODBC.Con!rstSel.FieldValTrim!PART)
	V.Local.sCust.Set(V.ODBC.Con!rstSel.FieldValTrim!CUSTOMER)
	V.Local.sWOPriority.Set(V.ODBC.Con!rstSel.FieldValTrim!PRIORITY)
	V.Local.sPartDescr.Set(V.ODBC.Con!rstSel.FieldValTrim!PART_DESCRIPTION)
	V.Local.sWOQty.Set(V.ODBC.Con!rstSel.FieldValTrim!QTY_ORDER)
	V.Local.sWOCustQty.Set(V.ODBC.Con!rstSel.FieldValTrim!QTY_CUSTOMER)
	V.Local.sWODateDue.Set(V.ODBC.Con!rstSel.FieldValTrim!DATE_DUE)
	V.Local.sCustomerPO.Set(V.ODBC.Con!rstSel.FieldValTrim!CUSTOMER_PO)
F.Intrinsic.Control.EndIf
F.ODBC.Con!rstSel.Close

'get the Weight from Order_Lines table
F.Intrinsic.String.Build("Select Sales_Order, Sales_Order_line from V_JOB_HEADER where JOB = '{0}' and SUFFIX = '{1}'",v.Local.sjob,v.Local.ssuffix,v.Local.sSQL)
F.ODBC.Connection!Con.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
F.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
F.Intrinsic.String.Build("Select Weight from V_ORDER_LINES where ORDER_NO = '{0}' and RECORD_NO = '{1}0'",v.Local.sRet(0),v.Local.sRet(1),v.Local.sSQL)
F.ODBC.Connection!Con.ExecuteAndReturn(v.Local.sSQL,v.Local.fWeight)

'getting Order Notes
F.Intrinsic.String.Build("Select UF15 from CRM_UF_VALUE where TYPE = '12' and COMPID = '{0}'", V.Local.sCust, V.Local.sSQL)
F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sNote)

F.Intrinsic.String.Build("SELECT NAME_CUSTOMER FROM V_CUSTOMER_MASTER WHERE CUSTOMER = '{0}' ",V.Local.sCust.PSQLFriendly,V.Local.sSQL)
F.ODBC.Connection!Con.OpenRecordsetRO("rstSel",V.Local.sSQL)
F.Intrinsic.Control.If(V.ODBC.Con!rstSel.EOF,=,False)
	V.Local.sName.Set(V.ODBC.Con!rstSel.FieldValTrim!NAME_CUSTOMER)
F.Intrinsic.Control.EndIf
F.ODBC.Con!rstSel.Close

F.Intrinsic.String.Build("SELECT SCRAP_REASON FROM V_JOBS_IN_PROCESS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQUENCE = '{2}' AND EMPLOYEE_NAME = '{3}' ORDER BY SEQUENCE_KEY DESC ",V.Local.sJob,V.Local.sSuffix,V.Local.sSeq,V.Local.sEmployee.PSQLFriendly,V.Local.sSQL)
F.ODBC.Connection!Con.OpenRecordsetRO("rstSel",V.Local.sSQL)
F.Intrinsic.Control.If(V.ODBC.Con!rstSel.EOF,=,False)
	V.Local.sScrapCode.Set(V.ODBC.Con!rstSel.FieldValTrim!SCRAP_REASON)
	F.Intrinsic.String.Build("SELECT SCRAP_CODE_DESC FROM V_RJCT_SCRP_CODES WHERE SCRAP_CODE = '{0}' ",V.Local.sScrapCode,V.Local.sSQL)
	F.ODBC.Connection!Con.OpenRecordsetRO("rstSelA",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.Con!rstSelA.EOF,=,False)
		V.Local.sScrapDescription.Set(V.ODBC.Con!rstSelA.FieldValTrim!SCRAP_CODE_DESC)
	F.Intrinsic.Control.EndIf
	F.ODBC.Con!rstSelA.Close
F.Intrinsic.Control.EndIf
F.ODBC.Con!rstSel.Close

F.Intrinsic.String.Build("SELECT PARENT_WO, PARENT_SUFFIX_PARENT FROM V_JOB_HEADER WHERE JOB = '{0}' AND SUFFIX = '{1}' ",V.Local.sJob,V.Local.sSuffix,V.Local.sSQL)
F.ODBC.Connection!Con.OpenRecordsetRO("rstSel",V.Local.sSQL)
F.Intrinsic.Control.If(V.ODBC.Con!rstSel.EOF,=,False)
	V.Local.sParentJob.Set(V.ODBC.Con!rstSel.FieldValTrim!Parent_WO)
	V.Local.sParentSuffix.Set(V.ODBC.Con!rstSel.FieldValTrim!Parent_Suffix_Parent)
	F.Intrinsic.String.Build("SELECT PART, PART_DESCRIPTION FROM V_JOB_HEADER WHERE JOB = '{0}' AND SUFFIX = '{1}' ",V.Local.sParentJob,V.Local.sParentSuffix,V.Local.sSQL)
	F.ODBC.Connection!Con.OpenRecordsetRO("rstSelA",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.Con!rstSelA.EOF,=,False)
		V.Local.sParentPart.Set(V.ODBC.Con!rstSelA.FieldValTrim!Part)
		V.Local.sParentDescr.Set(V.ODBC.Con!rstSelA.FieldValTrim!Part_Description)
	F.Intrinsic.Control.EndIf
	F.ODBC.Con!rstSelA.Close
F.Intrinsic.Control.EndIf
F.ODBC.Con!rstSel.Close

F.Intrinsic.String.Build("SELECT JOB, SUFFIX, PART, PART_DESCRIPTION FROM V_JOB_HEADER WHERE JOB = '{0}' AND SUFFIX = '000' ",V.Local.sJob,V.Local.sSQL)
F.ODBC.Connection!Con.OpenRecordsetRO("rstSel",V.Local.sSQL)
F.Intrinsic.Control.If(V.ODBC.Con!rstSel.EOF,=,False)
	V.Local.sTopParentJob.Set(V.ODBC.Con!rstSel.FieldValTrim!Job)
	V.Local.sTopParentSuffix.Set(V.ODBC.Con!rstSel.FieldValTrim!Suffix)
	V.Local.sTopParentPart.Set(V.ODBC.Con!rstSel.FieldValTrim!Part)
	V.Local.sTopParentDescr.Set(V.ODBC.Con!rstSel.FieldValTrim!Part_Description)
F.Intrinsic.Control.EndIf
F.ODBC.Con!rstSel.Close

F.Intrinsic.String.Build("SELECT PART FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND LMO = 'L' ORDER BY SEQ ",V.Local.sParentJob,V.Local.sParentSuffix,V.Local.sSQL)
F.ODBC.Connection!Con.OpenRecordsetRO("rstSel",V.Local.sSQL)
F.Intrinsic.Control.If(V.ODBC.Con!rstSel.EOF,=,False)
	V.Local.sParentInitWC.Set(V.ODBC.Con!rstSel.FieldValTrim!PART)
F.Intrinsic.Control.EndIf
F.ODBC.Con!rstSel.Close

'clear old records
F.Intrinsic.String.Build("DELETE FROM {1} WHERE TRMNL = '{0}'", V.Caller.Terminal, V.Local.sBITable, V.local.sSQL)
F.ODBC.Connection!Con.Execute(V.local.sSQL)

F.Intrinsic.String.Build("SELECT * FROM {1} WHERE TRMNL = '{0}' ",V.Caller.Terminal, V.Local.sBITable, V.Local.sSQL)
F.ODBC.Connection!Con.OpenRecordsetRW("rstSel",V.Local.sSQL)
F.ODBC.Con!rstSel.AddNew
F.ODBC.Con!rstSel.Set!TRMNL(V.Caller.Terminal)
F.ODBC.Con!rstSel.Set!JOB(V.Local.sJob)
F.ODBC.Con!rstSel.Set!SUFFIX(V.Local.sSuffix)
F.ODBC.Con!rstSel.Set!CUR_SEQ(V.Local.sSeq)
F.ODBC.Con!rstSel.Set!CUR_PART(V.Local.sCurPart)
F.ODBC.Con!rstSel.Set!CUR_DESCR(V.Local.sCurDescr)
F.ODBC.Con!rstSel.Set!LMO(V.Local.sLMO)
F.ODBC.Con!rstSel.Set!QTY(V.Local.sQty)
F.ODBC.Con!rstSel.Set!WORKCENTER(V.Local.sWC)
F.ODBC.Con!rstSel.Set!EMPLOYEE(V.Local.sEmployee)
F.ODBC.Con!rstSel.Set!QUALITY_NO(V.Local.sQualitynbr)
F.ODBC.Con!rstSel.Set!SCRAP_CODE(V.Local.sScrapCode)
F.ODBC.Con!rstSel.Set!SCRAP_CODE_DESC(V.Local.sScrapDescription)
F.ODBC.Con!rstSel.Set!SCRAP_QTY(V.Local.sScrapqty.Float)
F.ODBC.Con!rstSel.Set!CLOSE_FLAG(V.Local.sCloseflag)
F.ODBC.Con!rstSel.Set!PART(V.Local.sPart)
F.ODBC.Con!rstSel.Set!CUSTOMER(V.Local.sCust)
F.ODBC.Con!rstSel.Set!NAME(V.Local.sName)
F.ODBC.Con!rstSel.Set!NEXT_SEQ(V.Local.sNextSeq)
F.ODBC.Con!rstSel.Set!NEXT_PART(V.Local.sNextPart)
F.ODBC.Con!rstSel.Set!NEXT_DESCR(V.Local.sNextDescr)
F.ODBC.Con!rstSel.Set!Parent_Job(V.Local.sParentJob)
F.ODBC.Con!rstSel.Set!Parent_Suffix(V.Local.sParentSuffix)
F.ODBC.Con!rstSel.Set!Parent_Part(V.Local.sParentPart)
F.ODBC.Con!rstSel.Set!Parent_Descr(V.Local.sParentDescr)
F.ODBC.Con!rstSel.Set!Top_Parent_Job(V.Local.sTopParentJob)
F.ODBC.Con!rstSel.Set!Top_Parent_Suffix(V.Local.sTopParentSuffix)
F.ODBC.Con!rstSel.Set!Top_Parent_Part(V.Local.sTopParentPart)
F.ODBC.Con!rstSel.Set!Top_Parent_Descr(V.Local.sTopParentDescr)
F.ODBC.Con!rstSel.Set!QUALITY_NO(V.Local.sQualitynbr)
F.ODBC.Con!rstSel.Set!NEXT_SEQ_START(V.Local.dNext_DateStart.PervasiveDate)
F.ODBC.Con!rstSel.Set!NEXT_SEQ_DUE(V.Local.dNext_DateDue.PervasiveDate)
F.ODBC.Con!rstSel.Set!WO_PRIORITY(V.Local.sWOPriority)
F.ODBC.Con!rstSel.Set!PART_DESCR(V.Local.sPartDescr)
F.ODBC.Con!rstSel.Set!WO_QTY(V.Local.sWOQty)
F.ODBC.Con!rstSel.Set!WO_CUSTOMER_QTY(V.Local.sWOCustQty)
F.ODBC.Con!rstSel.Set!WO_DUE_DATE(V.Local.sWODateDue)
F.ODBC.Con!rstSel.Set!QTY_COMPLETED(V.Local.sQtyCompleted)
F.ODBC.Con!rstSel.Set!Parent_InitWC(V.Local.sParentInitWC)
F.ODBC.Con!rstSel.Set!Comments(V.Local.sComments)

F.ODBC.Con!rstSel.Update
F.ODBC.Con!rstSel.Close

F.Global.BI.InitializeReport(V.Local.sReportName, V.Local.sRptLoc, V.Local.iRptId)

F.Intrinsic.String.Build("SELECT PRINTER, SCRAPPRINTER FROM {1} WHERE TRMNL = '{0}'", V.Caller.Terminal, V.Local.sSettingsTable, V.Local.sSQL)
F.ODBC.Connection!Con.OpenRecordsetRO("rstSel",V.Local.sSQL)
F.Intrinsic.Control.If(V.ODBC.Con!rstSel.EOF,=,False)
	V.Local.sTPrinter.Set(V.ODBC.Con!rstSel.FieldValTrim!Printer)
	F.Intrinsic.Control.If(V.ODBC.Con!rstSel.FieldValTrim!ScrapPrinter,=,"")
		V.Local.sScrapPrinter.Set(V.Local.sTPrinter)
	F.Intrinsic.Control.Else
		V.Local.sScrapPrinter.Set(V.ODBC.Con!rstSel.FieldValTrim!ScrapPrinter)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.sQty.Float,>,0)
	F.Intrinsic.Control.If(V.Local.sType, =, "CRYSTAL", "OR", V.Local.sType, =, "ATG")
		V.Local.sScrapflag.Set("N")
		F.Intrinsic.String.Split("TRMNL*!*Job*!*Suffix*!*Scrapflag","*!*",V.Local.sParams)
		F.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}",V.Caller.Terminal,V.Local.sJob,V.Local.sSuffix,V.Local.sScrapflag,V.Local.sValues)
		F.Intrinsic.String.Split(V.Local.sValues,"*!*",V.Local.sValues)
		F.Global.BI.PrintReport(V.Local.iRptID,3,V.Local.sParams,V.Local.sValues,V.Local.sTPrinter,True)
		'F.Global.BI.PrintReport(V.Local.iRptID,0,V.Local.sParams,V.Local.sValues,True)
	F.Intrinsic.Control.ElseIf(V.Local.sType, =, "CODESOFT")
		F.Intrinsic.String.Build("select * from GAB_5455_WIP_OP_LABL where TRMNL= '{0}'", V.Caller.Terminal, V.Local.sSQL)
		F.Data.DataTable.CreateFromSQL("LabelTemp", "Con", V.Local.sSQL)
		F.Data.DataTable.AddColumn("LabelTemp", "Scrapflag", "String", "N")
		
		F.Global.BI.GetRunID(V.Local.iBIRunID)
		F.Global.BI.StartLogging(V.Local.iBIRunID, V.Local.iRptId, -1, "", V.Local.iLogID)
		F.Global.BI.PrintCodesoftLabelFromDataTable(V.Local.iBIRunID, V.Local.iLogID, "LabelTemp", V.Local.sTPrinter, False)
		F.Global.BI.StopLogging(V.Local.iLogID)
		F.Data.DataTable.Close("LabelTemp")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Endif
F.ODBC.Con!rstSel.Close

'need to do something about this
' Scrap Printer added as optional quantentine label printer when scrap labels printed on colored label stock
F.Intrinsic.Control.If(V.Local.sscrapqty.Float,>,0)
	
	'Scrap - loop through scrap_data table by scrap_ref = sscrapref
	F.Intrinsic.String.Build("SELECT SCRAP_REF, QUALITY, REASON_CODE, QTY FROM SCRAP_DATA WHERE SCRAP_REF = '{0}' ",V.Local.sScrapRef,V.Local.sSQL)
	F.ODBC.Connection!Con.OpenRecordsetRO("rstSel",V.Local.sSQL)

	Function.Intrinsic.Control.DoUntil(V.odbc.Con!rstSel.eof,=,True)

		V.Local.sQualitynbr.Set(V.ODBC.Con!rstSel.FieldValTrim!Quality)
		V.Local.sScrapQty.Set(V.ODBC.Con!rstSel.FieldValTrim!QTY)
		V.Local.sScrapCode.Set(V.ODBC.Con!rstSel.FieldValTrim!Reason_Code)

		F.Intrinsic.String.Build("SELECT SCRAP_CODE_DESC FROM V_RJCT_SCRP_CODES WHERE SCRAP_CODE = '{0}' ",V.Local.sScrapCode,V.Local.sSQL)
		F.ODBC.Connection!Con.OpenRecordsetRO("rstSelA",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.Con!rstSelA.EOF,=,False)
			V.Local.sScrapDescription.Set(V.ODBC.Con!rstSelA.FieldValTrim!SCRAP_CODE_DESC)
		F.Intrinsic.Control.EndIf
		F.ODBC.Con!rstSelA.Close

		F.Intrinsic.String.Build("SELECT * FROM {1} WHERE TRMNL = '{0}'", V.Caller.Terminal, V.Local.sBITable, V.Local.sSQL)
		F.ODBC.Connection!Con.OpenRecordsetRW("rstSelB",V.Local.sSQL)

		F.ODBC.Con!rstSelB.Set!QUALITY_NO(V.Local.sQualitynbr)
		F.ODBC.Con!rstSelB.Set!SCRAP_CODE(V.Local.sScrapCode)
		F.ODBC.Con!rstSelB.Set!SCRAP_CODE_DESC(V.Local.sScrapDescription)
		F.ODBC.Con!rstSelB.Set!SCRAP_QTY(V.Local.sscrapqty)
		F.ODBC.Con!rstSelB.Update
		F.ODBC.Con!rstSelB.Close
		
		F.Intrinsic.Control.If(V.Local.sType, =, "CRYSTAL", "OR", V.Local.sType, =, "ATG")
			V.Local.sScrapflag.Set("Y")
			F.Intrinsic.String.Split("TRMNL*!*Job*!*Suffix*!*Scrapflag","*!*",V.Local.sParams)
			F.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}",V.Caller.Terminal,V.Local.sJob,V.Local.sSuffix,V.Local.sScrapflag,V.Local.sValues)
			F.Intrinsic.String.Split(V.Local.sValues,"*!*",V.Local.sValues)
			F.Global.BI.PrintReport(V.Local.iRptID,3,V.Local.sParams,V.Local.sValues,V.Local.sScrapPrinter,True)
		F.Intrinsic.Control.ElseIf(V.Local.sType, =, "CODESOFT")
			F.Intrinsic.String.Build("select * from GAB_5455_WIP_OP_LABL where TRMNL= '{0}'", V.Caller.Terminal, V.Local.sSQL)
			F.Data.DataTable.CreateFromSQL("LabelTemp", "Con", V.Local.sSQL)
			F.Data.DataTable.AddColumn("LabelTemp", "Scrapflag", "String", "Y")
			
			F.Global.BI.GetRunID(V.Local.iBIRunID)
			F.Global.BI.StartLogging(V.Local.iBIRunID, V.Local.iRptId, -1, "", V.Local.iLogID)
			F.Global.BI.PrintCodesoftLabelFromDataTable(V.Local.iBIRunID, V.Local.iLogID, "LabelTemp", V.Local.sTPrinter, False)
			F.Global.BI.StopLogging(V.Local.iLogID)
			F.Data.DataTable.Close("LabelTemp")
		F.Intrinsic.Control.EndIf

		F.ODBC.con!rstSel.MoveNext
	Function.Intrinsic.Control.Loop
	F.ODBC.Con!rstSel.Close

F.Intrinsic.Control.Endif

'F.Intrinsic.String.Build("DELETE FROM {4} WHERE TRMNL = '{0}' AND JOB = '{1}' AND SUFFIX = '{2}' AND CUR_SEQ = '{3}'", V.Caller.Terminal, V.local.sJob, V.local.sSuffix, V.local.sSeq, V.Local.sBITable, V.local.sSQL)
F.Intrinsic.String.Build("DELETE FROM {1} WHERE TRMNL = '{0}'", V.Caller.Terminal, V.Local.sBITable, V.local.sSQL)
F.ODBC.Connection!Con.Execute(V.local.sSQL)

F.ODBC.Connection!Con.Close

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Close", "UNATTENDED", True, "PROJECT", "4258", "PROJECTTITLE", "SigmaNest to GSS Labor Upload", "TASK", "Labor_Upload")
F.Intrinsic.Control.EndTry
Program.Sub.MoveTicket.End