Program.Sub.Preflight.Start
Variable.Global.sSNServer.Declare(String)
Variable.Global.sSNDatabase.Declare(String)
Variable.Global.sSNUID.Declare(String)
Variable.Global.sSNPWD.Declare(String)
Variable.Global.sSNInput.Declare(String)
v.Global.sLogFile.Declare(String)
v.Global.sLog.Declare(String)
Program.Sub.Preflight.End

Program.Sub.Main.Start
F.Intrinsic.Control.SetErrorHandler("Main_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

'Modified by Trey S
'December 6th, 2019
'Added call to another script to upload labor, GCG_4258_LaborUpload.g2u

'//************************************************************************************************************
' This script is for reading feedback from Sigma Nest, for Labor Hours, Piece Counts, and
' Material usage.  For Labor and Piece Counts, an employee ID should be created.  The file that
' will be read will be a 36 field comma delimited file with fields:
' JOBNUMBER, PROGRAMNUMBER, PARTNUMBER, QTYORDERED, QTYCompleted,
' PartCuttingTimeOnePart_Hrs, NESTEDAREA_in_Ea_Part, NESTEDWEIGHT_Lbs, SHEETNAME,
' PROGRAM_SCRAP_PERCENTAGE, MACHINE, SHT_LOCATION, SHT_HEATNUM, SHT_BinNum,
' SHT_Mil, PRT_Data1, PRT_Data2, PRT_Data3, PRT_Data4, PRT_Data5, PRT_Data6, PRT_Data7,
' PRT_Data8, PRT_Data9, PRT_Data10, PRT_Data11, PRT_Data12, PRT_Data13, PRT_Data14,
' Sht_Total_Area, True_Part_Weight, MachineNumber, Sht_PrimeCode, UsedArea, TaskName, QtyNested
'
' The script can also be setup in the Task scheduler, to run unattended, but this version assumes
' user interaction.  User control is recommended during testing, to be able to evaluate update results
' as they occur.
'************************************************************************************************************//
V.Local.Export.Declare(String)
V.Local.exists.Declare(Boolean)
v.Local.bExist.Declare(Boolean)

'f.Intrinsic.String.Build("{0}\GSSSNLOG.txt",v.Caller.FilesDir,v.Global.sLogFile)
f.Intrinsic.String.Build("{0}\Custom\4258\Log\GCG_4258_SigmaNest_To_GSS_Roberts_Log.txt",v.Caller.GlobalDir,v.Global.sLogFile)
f.Intrinsic.File.Exists(v.Global.sLogFile,v.Local.bExist)
f.Intrinsic.Control.If(v.Local.bExist,=,False)
	f.Intrinsic.File.String2File(v.Global.sLogFile,"")
f.Intrinsic.Control.EndIf

f.Intrinsic.String.Build("{0}: Starting SN to GSS",v.Ambient.now,v.Global.sLog)
f.Intrinsic.File.Append2FileNewLine(v.Global.sLogFile,v.Global.sLog)

' find the file path
F.Intrinsic.Control.CallSub(Filepath)

' imported files will go into the V.Args.FILELOC\Processed Directory.  If not found, create it.
f.Intrinsic.String.Build("{0}Processed",v.Args.FILELOC,v.Local.Export)
F.Intrinsic.File.DirExists(V.Local.Export,V.Local.Exists)
F.Intrinsic.Control.If(V.Local.exists,=,False)
	F.Intrinsic.File.CreateDir(V.Local.Export)
F.Intrinsic.Control.EndIf

' run the process
F.Intrinsic.Control.CallSub(Get_file,"FILELOC",V.Args.FILELOC)
' end the script
F.Intrinsic.Control.End

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Main_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4258_SigmaNest_To_GSS_Roberts.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Debug.SetLA(v.Local.sError)
	f.Intrinsic.String.Build("{0}: Error handler: {1} ",v.Ambient.now,v.Local.sError,v.Global.sLog)
	f.Intrinsic.File.Append2FileNewLine(v.Global.sLogFile,v.Global.sLog)
	F.Intrinsic.Control.CallSub(unload)
Function.Intrinsic.Control.EndIf

Program.Sub.Main.End

Program.Sub.Get_File.Start
F.Intrinsic.Control.SetErrorHandler("Get_File_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSel.Declare(String)
V.Local.sSNFilePath.Declare(String)
V.Local.sSNFiles.Declare(String)
V.Local.sFilename.Declare(String)
V.Local.sFileList.Declare(String)
V.Local.FileDetail.Declare(String)
V.Local.items.Declare(String)
V.Local.count.Declare(Long)
V.Local.Lcount.Declare(Long)
V.Local.wo.Declare(String)
V.Local.Lines.Declare(String)
V.Local.ExportName.Declare(String)
V.Local.dHours.Declare(Date)
V.Local.fHours.Declare(Float)
V.Local.fQty.Declare(Float)
V.Local.date.Declare(String)
V.Local.sEmployee.Declare(String)
V.Local.job.Declare(String)
V.Local.suffix.Declare(String)
V.Local.seq.Declare(String)
V.Local.sWC.Declare(String)
V.Local.sHours.Declare(String)
V.Local.sClosed.Declare(String)
V.Local.sDirect.Declare(String)
V.Local.sTimeIn.Declare(String)
V.Local.sTimeOut.Declare(String)
V.Local.sRateType.Declare(String)
V.Local.sGood.Declare(String)
V.Local.sScrap.Declare(String)
V.Local.sReason.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sQty.Declare(String)
V.Local.sLaborData.Declare(String)
V.Local.sLaborFile.Declare(String)
V.Local.sMaterialData.Declare(String)
V.Local.sMaterialFile.Declare(String)
V.Local.bFileExists.Declare(Boolean)
V.Local.sMsg.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sLine.Declare(String)
V.Local.sDate.Declare(String)
V.Local.sTime.Declare(String)
V.Local.sLineFileName.Declare(String)
V.Local.sPrint.Declare(String)
V.Local.sSched.Declare(String)
V.Local.sSchedPath.Declare(String)
V.Local.sMaterialSeq.Declare(String)
V.Local.sRev.Declare(string)
V.Local.sSheet.Declare(string)
v.Local.sSerial.Declare(string)
V.Local.sFiller.Declare(string)
v.Local.sFiller2.Declare(string)
V.Local.sScheduleNumber.Declare(string)
V.Local.sIncrement.Declare(string)
V.Local.sMJob.Declare(string)
V.Local.sMSuffix.Declare(string)
V.Local.sMSeq.Declare(string)
V.Local.sJob.Declare(string)
V.Local.sSuffix.Declare(string)
V.Local.sSeq.Declare(string)
V.Local.sWorkCenter.Declare(string)
v.Local.sFullPart.Declare(String)
v.Local.fComp.Declare(Float)
V.Local.bDecimal.Declare(Boolean)
V.Local.sScript.Declare(String)
V.Local.sOldSchedule.Declare(String)
V.Local.iIncrementCounter.Declare(Long, 1)
V.Local.fSum.Declare(Float)
V.Local.sFilter.Declare(String)
V.Local.fTotalIssue.Declare(Float)
V.Local.sTempIssue.Declare(String)
V.Local.fFinalIssueQuantity.Declare(Float)
V.Local.sAmount.Declare(String)
V.Local.fTotalQuantity.Declare(Float)

' NOTE: all information will be on a delmited file.  This sub could be re-written to just reference the elements of the line.
' I have put everything in it's own variable, to help with understanding what information is used.
f.Intrinsic.String.Build("{0}: Reading File to Issue",v.Ambient.now,v.Global.sLog)
f.Intrinsic.File.Append2FileNewLine(v.Global.sLogFile,v.Global.sLog)

Function.Odbc.Connection!Conx.OpenConnection(Variable.Ambient.pDSN,Variable.Ambient.PUser,Variable.Ambient.PPass)

' Get list of all files in the directory.  If no files are found, exit program.
' This script assumes that any file within the specifid directory is an SN feedback file
' so any file found will be processed.
F.Intrinsic.File.GetFileList(V.Args.FILELOC,V.Local.sFileList)
F.Intrinsic.String.Split(V.Local.sFileList,":",V.Local.sSNFiles)
F.Intrinsic.Control.If(V.Local.sSNFiles(0),=,"")
	F.Intrinsic.Control.GoTo("EXIT")
F.Intrinsic.Control.EndIf


F.Intrinsic.UI.InvokeWaitDialog("Reading Records from Sigma Nest")
' for each file

' for each file
F.Intrinsic.Control.For(V.Local.count,V.Local.sSNFiles.LBound,V.Local.sSNFiles.UBound,1)
	' copy the original file to the export directory and delete the original to prevent overwriting
	f.Intrinsic.String.Build("{0}{1}",v.Args.FILELOC,v.Local.sSNFiles(v.Local.count),v.Local.sFilename)
	f.Intrinsic.String.Build("{0}Processed\{1}",v.Args.FILELOC,v.Local.sSNFiles(v.Local.count),v.Local.ExportName)
	F.Intrinsic.File.CopyFile(V.Local.sFilename,V.Local.ExportName)
	F.Intrinsic.File.DeleteFile(V.Local.sFilename)
	' read the file copy
	F.Intrinsic.File.File2String(V.Local.ExportName,V.Local.FileDetail)
	' split to each line
	F.Intrinsic.String.Split(V.Local.FileDetail,V.Ambient.NewLine,V.Local.Lines)
	
	F.Intrinsic.Control.If(V.DataTable.dtIssued.Exists)
		F.Data.DataTable.Close("dtIssued")
	F.Intrinsic.Control.EndIf
	
	F.Data.DataTable.Create("dtIssued")
	F.Data.DataTable.AddColumn("dtIssued", "Material", "String", "")
	F.Data.DataTable.AddColumn("dtIssued", "Location", "String", "")
	F.Data.DataTable.AddColumn("dtIssued", "Lot", "String", "")
	F.Data.DataTable.AddColumn("dtIssued", "Bin", "String", "")
	F.Data.DataTable.AddColumn("dtIssued", "Heat", "String", "")
	F.Data.DataTable.AddColumn("dtIssued", "Serial", "String", "")
	F.Data.DataTable.AddColumn("dtIssued", "Quantity", "Float", 0)
	
	'JOBNUMBER, PROGRAMNUMBER, PARTNUMBER, QTYORDERED, QTYONPROGRAM, OnePartCutTime_Hrs, NESTEDAREA_in2_Ea_Part, NESTEDWEIGHT_Total_Lbs, SHEETNAME, PROGRAM_SCRAP_PERTAGE, MACHINE, SHT_LOCATION, SHT_HEATNUM, SHT_BinNum, SHT_Mil, PRT_Data1, PRT_Data2, PRT_Data3, PRT_Data4, PRT_Data5, PRT_Data6, PRT_Data7, PRT_Data8, PRT_Data9, PRT_Data10, PRT_Data11, PRT_Data12, PRT_Data13, PRT_Data14, Sht_Total_Area, True_Part_Weight, MachineNumber, Sht_PrimeCode, UsedArea, TaskName, Material, Thickness, QtyRejected, Scrapped_Part, ProgQtyNested, Operator, RejectReason, Comment, RejectDateTime 
	
	' for each line; start at line 1 because first line(0) is the header record
	F.Intrinsic.Control.For(V.Local.Lcount,1,V.Local.Lines.UBound,1)
		' split out the different fields
		v.Local.items.Redim(0,0)
		F.Intrinsic.String.Split(V.Local.Lines(V.Local.Lcount),",",V.Local.items)
		V.Local.items.RedimPreserve(0,44)
		' if the job record is not blank (assuming blank line) then proceed
		F.Intrinsic.Control.If(V.Local.items(0),<>,"")

			' workorder will be Job-Suffix:Seq; split to get each distinct value
			v.Local.sSeq.RedimPreserve(0,0)
			F.Intrinsic.String.Split(V.Local.items(0),":",V.Local.seq)
			v.Local.sSeq.RedimPreserve(0,1)
			' job
			v.Local.wo.RedimPreserve(0,0)
			F.Intrinsic.String.Split(V.Local.seq(0),"-",V.Local.wo)
			v.Local.wo.RedimPreserve(0,1)
			V.Local.job.Set(V.Local.wo(0))
			F.Intrinsic.String.LPad(V.Local.job,"0",6,V.Local.job)
			' suffix
			V.Local.suffix.Set(V.Local.wo(1))
			' seq
			V.Local.seq.Set(V.Local.seq(1))
			'Somehow 7 characters gets passed back some times. Lets make sure it's 6
			F.Intrinsic.String.LPad(V.Local.seq,"0",6,V.Local.seq)
			' workcenter
			V.Local.sWC.Set(V.Local.items(10).Trim)
			' Hours
			V.Local.sHours.Set("0")
			' closed flag
			V.Local.sClosed.Set("")
			' Direct/Indirect flag
			V.Local.sDirect.Set("D")
			' Time In/Out
			' actual time to hte job is determined by start and stop time.  We assume a Start Time of 1:00AM.
			' Stop Time is determined by adding the run time, in minutes, to the Start Time
			' hours from the file
			V.Local.fHours.Set(V.Local.items(5))
			' multiply by 60, to get the time in minutes
			F.Intrinsic.Math.Mult(V.Local.fHours,60,V.Local.fHours)
			' set the 1:00AM time value, formatted as hhmm
			F.Intrinsic.Date.TimeSerial(01,00,00,V.Local.dHours)
			F.Intrinsic.String.Format(V.Local.dHours,"hhnn",V.Local.sTimeIn)
			' add the run time to 1:00AM, format as hhmm
			F.Intrinsic.Date.DateAdd("N",V.Local.fHours,V.Local.dHours,V.Local.dHours)
			F.Intrinsic.String.Format(V.Local.dHours,"hhnn",V.Local.sTimeOut)
			' Rate Type is Regular
			V.Local.sRateType.Set("R")
			
			F.Intrinsic.String.Format(v.Local.items(4).Float,"0",V.Local.sGood)
			' Scrap/Scrap Reason; not reported here
			V.Local.sScrap.Set("0")
			V.Local.sReason.Set("0")

						
'**************************MATERIAL***********************************
			v.Local.sPart.RedimPreserve(0,0)
			V.Local.sPart.Set(V.Local.items(8))
			'Get the Serial it came from
			f.Intrinsic.String.Split(v.Local.sPart,"%",v.Local.sPart)
'			f.Intrinsic.Control.If(v.Local.sPart(0),<>,v.Local.items(19))
'				v.Local.sSerial.Set(v.Local.sPart(v.Local.sPart.UBound))
'			f.Intrinsic.Control.Else
'				v.Local.sSerial.Set("")
'			f.Intrinsic.Control.EndIf
			v.Local.sPart.RedimPreserve(0,1)
			v.Local.sSerial.Set(v.Local.sPart(1).Trim)
			
			v.Local.sPart.RedimPreserve(0,0)
			f.Intrinsic.String.Split(v.Local.sPart,"_",v.Local.sPart)
			v.Local.sPart.RedimPreserve(0,1)
			f.Intrinsic.String.RPad(v.Local.sPart," ",20,v.Local.sPart)
			v.Local.sFullPart.Set(v.Local.sPart)
			v.Local.sRev.Set(v.Local.sPart.Right3)
			v.Local.sPart.Set(v.Local.sPart.Left17)
			v.Local.sRev.Set(v.Local.sRev.Trim)
			v.Local.sPart.Set(v.Local.sPart.Trim)
			V.Local.items(12).Set(V.Local.sPart(1).Trim)
			F.Intrinsic.Math.Add(V.Local.items(4).Float, V.Local.items(37).Float, V.Local.fTotalQuantity)
			F.Intrinsic.Math.Mult(V.Local.Items(6).Float,V.Local.fTotalQuantity,V.Local.items(6))
			'Commented out so it issues in Square inches.
			'so now it is square inches each * quantity
			'F.Intrinsic.Math.Div(V.Local.items(6).Float,V.Local.items(29).Float,V.Local.items(6))
			'F.Intrinsic.String.Format(V.Local.items(6),"####.000",V.Local.items(6))			
			V.Local.fQty.Set(V.Local.items(6).Float)
			
			'we need to check and make sure we have enough qty on hand before issuign it
			f.Intrinsic.String.Build("SELECT PART, LOCATION, LOT, BIN, HEAT, SERIAL_NUMBER, QUANTITY FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOCATION = '{1}' AND LOT = '{2}' AND BIN = '{3}' AND HEAT = '{4}' AND SERIAL_NUMBER = '{5}' ",V.Local.sFullPart.Trim,V.Local.items(11).Trim,V.Local.items(14).Trim,"TOWER",V.Local.items(12).Trim,v.Local.sSerial,v.Local.sSQL)
			f.ODBC.Connection!Conx.OpenLocalRecordSetRO("rstQty",v.Local.sSQL)
			f.Intrinsic.Control.If(v.ODBC.Conx!rstQty.EOF,=,False)
				
				V.Local.fSum.Set(0)
				F.Intrinsic.Control.If(v.ODBC.Conx!rstQty.FieldValFloat!QUANTITY, >, 0)
					'check if enough to issue considering earlier issues to same material
					F.Intrinsic.String.Build("Material = '{0}' and Location = '{1}' and Lot = '{2}' and Bin = '{3}' and Heat = '{4}' and Serial = '{5}'", V.Local.sFullPart.Trim, V.Local.items(11).Trim, V.Local.items(14).Trim, "TOWER", V.Local.items(12).Trim, v.Local.sSerial, V.Local.sFilter)
					F.Data.DataTable.Compute("dtIssued", "Sum(Quantity)", V.Local.sFilter, V.Local.fSum)
					
					F.Intrinsic.Math.Add(V.Local.fSum, v.Local.fQty, V.Local.fTotalIssue)
					F.Intrinsic.Control.If(V.Local.fTotalIssue, >, v.ODBC.Conx!rstQty.FieldValFloat!QUANTITY)
						F.Intrinsic.Math.Sub(v.ODBC.Conx!rstQty.FieldValFloat!QUANTITY, V.Local.fSum, V.Local.fFinalIssueQuantity)
						f.Intrinsic.String.Build("{0}: Not enough qty on hand {1} to issue {2} on top of the {3} already being issued: {4}, Issuing full quantity {7} to job {5}-{6} instead.",v.Ambient.now,v.ODBC.Conx!rstQty.FieldValFloat!QUANTITY, V.Local.fQty, V.Local.fSum, v.Local.sSQL, V.Local.job,V.Local.suffix, V.Local.fFinalIssueQuantity, v.Global.sLog)
						f.Intrinsic.File.Append2FileNewLine(v.Global.sLogFile,v.Global.sLog)
						'V.Local.items(6).Set(v.ODBC.Conx!rstQty.FieldValFloat!QUANTITY)
						'F.Intrinsic.String.Format(v.ODBC.Conx!rstQty.FieldValFloat!QUANTITY,"####.00",V.Local.sTempIssue)			
						V.Local.fQty.Set(V.Local.fFinalIssueQuantity)
						'V.Local.items(6).Set(V.Local.fQty)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Math.Add(V.Local.fSum, v.Local.fQty, V.Local.fTotalIssue)
				'f.Intrinsic.Math.Sub(v.ODBC.Conx!rstQty.FieldValFloat!QUANTITY,v.Local.fQty,v.Local.fComp)
				f.Intrinsic.Math.Sub(v.ODBC.Conx!rstQty.FieldValFloat!QUANTITY,V.Local.fTotalIssue,v.Local.fComp)
				
				f.Intrinsic.Control.If(v.Local.fComp,>=,0)
		
					' concat Material informaiton to a line
					' This information till be written to a file named LMOPEN.txt, which will be sent to WIR100, to create the material issue to the job
					' This is a comma delimited file, qith fields:
					' Part, Rev, Loc, Qty, Lot, Bin, Heat, Serial, Job, Suffix, Seq
					'we will check to see if any material has been issued on the job already, if there has then we will not issue
					F.Intrinsic.String.Build("SELECT TOP 1 SEQ From V_JOB_OPERATIONS Where Job = '{0}' And SUFFIX = '{1}' And LMO = 'M' AND SEQ < '{2}' ORDER BY SEQ DESC ",V.Local.job,V.Local.suffix,v.Local.seq,V.Local.sMaterialSeq) 
					F.ODBC.Connection!Conx.ExecuteAndReturn(V.Local.sMaterialSeq, V.Local.sMaterialSeq)
					F.Intrinsic.String.Replace(V.Local.sMaterialSeq, "*!*","" ,V.Local.sMaterialSeq)
			
					'build line
					F.Intrinsic.String.Build("SELECT (UNITS_OPEN - {0}) AS UNITS_OPEN FROM V_JOB_OPERATIONS WHERE JOB = '{1}' AND SUFFIX = '{2}' AND SEQ = '{3}' ",V.Local.items(4).Float,V.Local.job.Trim,V.Local.suffix.Trim,V.Local.seq.Trim,V.Local.sSQL)
					F.ODBC.Connection!Conx.OpenLocalRecordsetRO("rstCheck",v.Local.sSQL)
					f.Intrinsic.Control.If(v.ODBC.Conx!rstCheck.EOF,=,False)
						f.Intrinsic.Control.If(v.ODBC.Conx!rstCheck.FieldValFloat!UNITS_OPEN,<=,0)
							F.Intrinsic.String.Build("{0}{5}SN72{5},{5}1{5},{5}{5},{5}{1}-{2}:{3}{5}{4}",V.Local.sLine,V.Local.job,V.Local.suffix,V.Local.seq,V.Ambient.NewLine,v.Ambient.DblQuote,V.Local.sLine)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					F.ODBC.Conx!rstCheck.Close
					
					'add to table custom
					f.Intrinsic.String.Build("SELECT * FROM GCG_4258_S_TO_GSS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQUENCE = '{2}' ",V.Local.job.Trim,V.Local.suffix.Trim,V.Local.seq.Trim,V.Local.sSQL)
					F.ODBC.Connection!Conx.OpenLocalRecordsetRW("rstAdd",V.Local.sSQL)
					f.Intrinsic.Control.If(v.ODBC.Conx!rstAdd.EOF,=,True)
						f.ODBC.Conx!rstAdd.AddNew
					f.Intrinsic.Control.Else
						f.Intrinsic.Math.Add(v.ODBC.Conx!rstAdd.FieldValFloat!GOOD_PIECES,V.Local.sGood.Float,V.Local.sGood)
						f.Intrinsic.Math.Add(v.ODBC.Conx!rstAdd.FieldValFloat!BAD_PIECES,V.Local.sScrap.Float,V.Local.sScrap)
					f.Intrinsic.Control.EndIf
					Function.ODBC.Conx!rstAdd.set!JOB(V.Local.job.Trim)
					Function.ODBC.Conx!rstAdd.set!SUFFIX(V.Local.suffix.Trim)
					Function.ODBC.Conx!rstAdd.set!SEQUENCE(V.Local.seq.Trim)
					Function.ODBC.Conx!rstAdd.set!MACHINE(V.Local.sWC.Trim)
					Function.ODBC.Conx!rstAdd.set!GOOD_PIECES(V.Local.sGood.Float)
					Function.ODBC.Conx!rstAdd.set!BAD_PIECES(V.Local.sScrap.Float)
					Function.ODBC.Conx!rstAdd.set!REASON(V.Local.sReason.Trim)
					Function.ODBC.Conx!rstAdd.Update
					F.ODBC.Conx!rstAdd.Close
					
'---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
					
					'flex schedule
					'get material seq first
					' Part, Rev, Loc, Qty, Lot, Bin, Heat, Serial, Job, Suffix, Seq
					'change Bin from Item(13) to TOWER
		               
		               'F.Intrinsic.String.Build("{0}{1},{12},{11},{2},{3},{4},{5},{6},{7},{8},{9}{10}",V.Local.sMaterialData,V.Local.sFullPart.Trim,V.Local.fQty,V.Local.items(14).Trim,"TOWER",V.Local.items(12).Trim,v.Local.sSerial,V.Local.job.Trim,V.Local.suffix.Trim,V.Local.sMaterialSeq.Trim,V.Ambient.NewLine,V.Local.items(11).Trim,v.Local.sRev.Trim,V.Local.sMaterialData)
		               F.Intrinsic.String.Format(V.Local.fQty,"####.0000", V.Local.sAmount)
		               F.Intrinsic.String.Build("{0}{1},{12},{11},{2},{3},{4},{5},{6},{7},{8},{9}{10}",V.Local.sMaterialData,V.Local.sFullPart.Trim,V.Local.sAmount,V.Local.items(14).Trim,"TOWER",V.Local.items(12).Trim,v.Local.sSerial,V.Local.job.Trim,V.Local.suffix.Trim,V.Local.sMaterialSeq.Trim,V.Ambient.NewLine,V.Local.items(11).Trim,v.Local.sRev.Trim,V.Local.sMaterialData)
		               
		               F.Data.DataTable.AddRow("dtIssued", "Material", V.Local.sFullPart.Trim, "Location", V.Local.items(11).Trim, "Lot", V.Local.items(14).Trim, "Bin", "TOWER", "Heat", V.Local.items(12).Trim, "Serial", V.Local.sSerial, "Quantity", V.Local.fQty)

					'We need to pass Schedule Number, Increment, Material Job, Material Suffix, Material Seq, Job, Suffix, Seq, Filler, Work Center, Part = sheetname, Fillter2 new line 
		
					V.Local.sFiller.Set("000000999999")
					V.Local.sFiller2.Set("000000999999")
					'padd all of the paramaters to fit into the file
					F.Intrinsic.String.RPad(V.Local.items(1).Left6," ",9,V.Local.sScheduleNumber)
					
					'Reset increment if neccessary
					F.Intrinsic.Control.If(V.Local.Lcount, =, 0, or, V.Local.sScheduleNumber.Trim, !=, V.Local.sOldSchedule.Trim)
						'Call callwrapper 900300
						
						F.Intrinsic.Control.If(V.Local.sOldSchedule.Trim, !=, "")
'							F.Intrinsic.String.Build("000000!*!999999!*!{0}!*!000!*!{0}!*!000!*!Y!*!Y", V.Local.sOldSchedule, V.Local.sPrint)
'							Function.Global.General.CallWrapperSync(900300, V.Local.sPrint)
						F.Intrinsic.Control.EndIf
						
						V.Local.sOldSchedule.Set(V.Local.sScheduleNumber)
						V.Local.iIncrementCounter.Set(1)
						'Need to check to make sure that we don't already have this schedule number
''						F.Intrinsic.String.Build("DELETE FROM JOB_CT_FLX_SCHD WHERE SCHEDULE LIKE '%{0}' ", V.Local.sScheduleNumber, V.Local.sSQL)
'						F.ODBC.Connection!Conx.Execute(V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					'F.Intrinsic.String.RPad("000001"," ",6,V.Local.sIncrement)
					F.Intrinsic.String.RPad(V.Local.iIncrementCounter," ",6,V.Local.sIncrement)
					F.Intrinsic.String.RPad(V.Local.Job.Trim," ",6,V.Local.sMJob)
					F.Intrinsic.String.RPad(V.Local.Suffix.Trim," ",3,V.Local.sMSuffix)
					F.Intrinsic.String.RPad(V.Local.sMaterialSeq.Trim," ",11,V.Local.sMSeq)
					
					F.Intrinsic.String.RPad(V.Local.Job.trim," ",6,V.Local.sJob)
					F.Intrinsic.String.RPad(V.Local.Suffix.Trim," ",3,V.Local.sSuffix)
					F.Intrinsic.String.RPad(V.Local.Seq.Trim," ",6,V.Local.sSeq)
					F.Intrinsic.String.RPad(V.Local.sFiller," ",37,V.Local.sFiller)
					F.Intrinsic.String.RPad(V.Local.items(10).Trim," ",4,V.Local.sWorkCenter)
					F.Intrinsic.String.RPad(V.Local.items(8).Trim," ",25,V.Local.sPart)
					F.Intrinsic.String.RPad(V.Local.sFiller2," ",12,V.Local.sFiller2)
					F.Intrinsic.String.Build("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}","",V.Local.sScheduleNumber,V.Local.sIncrement,V.Local.sMJob,V.Local.sMSuffix,V.Local.sMSeq,V.Local.sJob,V.Local.sSuffix,V.Local.sSeq,V.Local.sFiller,V.Local.sWorkCenter,V.Local.sPart,V.Local.sFiller2,V.Ambient.NewLine,V.Local.sSched)
		
'					'Need to check to make sure that we don't already have this scheudle number
'					f.Intrinsic.String.Build("DELETE FROM JOB_CT_FLX_SCHD WHERE SCHEDULE LIKE '%{0}' ",V.Local.items(1).Left6,V.Local.sSQL)
'					F.ODBC.Connection!Conx.Execute(V.Local.sSQL)
					
					'and create a text file named SCHED.TXT in the Files directory. 
'					F.Intrinsic.String.Build("{0}\SCHED.TXT",V.Caller.FilesDir,V.Local.sSchedPath)
'					F.Intrinsic.File.String2File(V.Local.sSchedPath,V.Local.sSched)
'					' call callwrapper 6000 
'					f.Intrinsic.String.Build("{0}: Creating Flex Schedule",v.Ambient.now,v.Global.sLog)
'					f.Intrinsic.File.Append2FileNewLine(v.Global.sLogFile,v.Global.sLog)
'					Function.Global.General.CallWrapperSync(6000,"NS!*!50")
					
'					F.Intrinsic.String.Build("000000!*!999999!*!{0}!*!000!*!{0}!*!000!*!Y!*!Y",v.Local.sScheduleNumber,V.Local.sPrint)
'					Function.Global.General.CallWrapperSync(900300,V.Local.sPrint)
						
					F.Intrinsic.Math.Add(V.Local.iIncrementCounter, 1, V.Local.iIncrementCounter)
				f.Intrinsic.Control.Else
					'we dont have enough qty on hand
					f.Intrinsic.String.Build("{0}: Not enough qty on hand {1}: {2}",v.Ambient.now,v.Local.fComp,v.Local.sSQL,v.Global.sLog)
					f.Intrinsic.File.Append2FileNewLine(v.Global.sLogFile,v.Global.sLog)
				F.Intrinsic.Control.EndIf
			f.Intrinsic.Control.Else
				'lot bin doesn't exist
				f.Intrinsic.String.Build("{0}: Lot bin doesn't exist: {1}",v.Ambient.now,v.Local.sSQL,v.Global.sLog)
				f.Intrinsic.File.Append2FileNewLine(v.Global.sLogFile,v.Global.sLog)
			f.Intrinsic.Control.EndIf
			f.ODBC.Conx!rstQty.Close
		f.Intrinsic.Control.EndIf
'		F.Intrinsic.Control.If(V.Local.Lcount, =, V.Local.Lines.UBound)
'			F.Intrinsic.String.Build("000000!*!999999!*!{0}!*!000!*!{0}!*!000!*!Y!*!Y", V.Local.sScheduleNumber, V.Local.sPrint)
'			Function.Global.General.CallWrapperSync(900300, V.Local.sPrint)
'		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.Lcount)
	
'---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

'************************LOAD DATA one file at a time*****************************
	' NOTE: WIR100 now has a callwrapper 450100 that can be used instead
	f.Intrinsic.String.Build("{0}\L{1}{2}MOPEN.txt",v.Caller.FilesDir,v.Caller.CompanyCode,v.Caller.Terminal,v.Local.sLaborFile)
	F.Intrinsic.File.String2File(V.Local.sLaborFile,V.Local.sMaterialData)
	f.Intrinsic.String.Build("{0}: {1}",v.Ambient.now,v.Local.sMaterialData,v.Global.sLog)
	f.Intrinsic.File.Append2FileNewLine(v.Global.sLogFile,v.Global.sLog)

	'new line V.Local.sLine date time
	Function.Intrinsic.String.Format (V.Ambient.Date ,"YYYYDDMM",V.Local.sDate)
	Function.Intrinsic.String.Format (V.Ambient.Time ,"HHNNSS",V.Local.sTime)
	F.Intrinsic.String.Build("{0}{1}{2}.txt",v.Global.sSNInput,V.Local.sDate,V.Local.sTime,V.Local.sLineFileName)
	F.Intrinsic.Control.If(V.Local.sLine,<>,"")
		F.Intrinsic.File.String2File(V.Local.sLineFileName,V.Local.sLine)
	F.Intrinsic.Control.EndIf

'	f.Intrinsic.String.Build("{0}L{1}{2}MOPEN.txt{0}",v.Ambient.DblQuote,v.Caller.CompanyCode,v.Caller.Terminal,v.Local.sLaborFile)
'	F.Intrinsic.Task.LaunchGSSSync("WIR100","-C",V.Local.sLaborFile)
	f.Intrinsic.String.Build("L{0}{1}MOPEN.txt",v.Caller.CompanyCode,v.Caller.Terminal,v.Local.sLaborFile)
	f.Intrinsic.String.Build("{0}: Created MOPEN files and backup, issuing material with 450100",v.Ambient.now,v.Global.sLog)
	f.Intrinsic.File.Append2FileNewLine(v.Global.sLogFile,v.Global.sLog)
	'******TESTING******
	f.Global.General.CallWrapperSync(450100,v.Local.sLaborFile)

	V.Local.sMaterialData.Set("")
	
	'Trey S, December 6th, 2019
	'putting this all in a seperate file, don't want to mess with this code too much
	F.Global.General.SetPassedDataElement("FILE_CONTENTS", V.Local.FileDetail)
	F.Global.General.SetPassedDataElement("FILE_NAME", V.Local.sFilename)
	F.Intrinsic.String.Build("{0}\GCG_4258_LaborUpload.g2u", V.Ambient.ScriptPath, V.Local.sScript)
	F.Global.General.CallSyncGAS(V.Local.sScript)

F.Intrinsic.Control.Next(V.Local.count)

F.Intrinsic.UI.CloseWaitDialog
F.Intrinsic.Control.Label("EXIT")
F.Intrinsic.Control.CallSub(unload)


F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Get_File_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4258_SigmaNest_To_GSS_Roberts.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Debug.SetLA(v.Local.sError)
	f.Intrinsic.String.Build("{0}: Error handler: {1} ",v.Ambient.now,v.Local.sError,v.Global.sLog)
	f.Intrinsic.File.Append2FileNewLine(v.Global.sLogFile,v.Global.sLog)
	F.Intrinsic.Control.CallSub(unload)
Function.Intrinsic.Control.EndIf

Program.Sub.Get_File.End

Program.Sub.FilePath.Start
F.Intrinsic.Control.SetErrorHandler("FilePath_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSel.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sHold.Declare(String)
V.Local.sVal.Declare(String)
V.Local.bRet.Declare(Boolean)
V.Local.sFile.Declare(String)
V.Local.iFor.Declare(Long)
V.Local.sEmployee.Declare(String)

' see if the credential file is found
F.Intrinsic.String.Build("{0}\SNLIC.dat",V.Caller.FilesDir,V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile,V.Local.bRet)

' if the file is found, look for the COMPLETE line
F.Intrinsic.Control.If(V.Local.bRet,=,True)
f.Intrinsic.String.Build("{0}: SNLIC.dat Exists",v.Ambient.now,v.Global.sLog)
f.Intrinsic.File.Append2FileNewLine(v.Global.sLogFile,v.Global.sLog)
	F.Intrinsic.File.File2String(V.Local.sFile,V.Local.sRet)
	F.Intrinsic.String.Split(V.Local.sRet,V.Ambient.NewLine,V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iFor,V.Local.sRet.LBound,V.Local.sRet.UBound,1)
		F.Intrinsic.String.Split(V.Local.sRet(v.Local.iFor),"::",V.Local.sHold)
		V.Local.sHold.RedimPreserve(0,1)
		F.Intrinsic.Control.SelectCase(V.Local.sHold(0))
			' for SN -> GS
			F.Intrinsic.Control.Case("COMPLETE")
				V.Local.sVal.Set(V.Local.sHold(1))
				F.Intrinsic.String.Right(V.Local.sVal,1,V.Local.sRet)
				F.Intrinsic.Control.If(V.Local.sRet,<>,"\")
					F.Intrinsic.String.Build("{0}\",V.Local.sVal,V.Local.sVal)
				F.Intrinsic.Control.EndIf
			'for SN Input
			f.Intrinsic.Control.Case("INPUT")
				V.Global.sSNInput.Set(v.Local.sHold(1).Trim)
		F.Intrinsic.Control.EndSelect
	F.Intrinsic.Control.Next(V.Local.iFor)
F.Intrinsic.Control.EndIf

' if the path is found,send it back.  otherwise end the script
F.Intrinsic.Control.If(V.Local.sVal,=,"")
	F.Intrinsic.UI.Msgbox("INPUT file path not found.")
	F.Intrinsic.Control.End

F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("FILELOC",V.Local.sVal)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("FilePath_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4258_SigmaNest_To_GSS_Roberts.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Debug.SetLA(v.Local.sError)
	f.Intrinsic.String.Build("{0}: Error handler: {1} ",v.Ambient.now,v.Local.sError,v.Global.sLog)
	f.Intrinsic.File.Append2FileNewLine(v.Global.sLogFile,v.Global.sLog)
	F.Intrinsic.Control.CallSub(unload)
Function.Intrinsic.Control.EndIf

Program.Sub.FilePath.End

Program.Sub.Unload.Start
F.Intrinsic.Control.SetErrorHandler("Unload_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

F.ODBC.Connection!Conx.Close
F.Intrinsic.Control.End

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Unload_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4258_SigmaNest_To_GSS_Roberts.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Debug.SetLA(v.Local.sError)
	f.Intrinsic.String.Build("{0}: Error handler: {1} ",v.Ambient.now,v.Local.sError,v.Global.sLog)
	f.Intrinsic.File.Append2FileNewLine(v.Global.sLogFile,v.Global.sLog)
	F.Intrinsic.Control.End

Function.Intrinsic.Control.EndIf

Program.Sub.Unload.End

Program.Sub.Comments.Start
${$0$}$GCG_4258_SigmaNest_To_GSS_Roberts.g2u$}$DH1$}$10/27/2016 4:18:11 PM$}$False
${$3$}$0$}$$}$-1$}$-1$}$$}$1/1/1900$}$SN90 transaction loads GSS Inventory into Sigma Nest
Program.Sub.Comments.End